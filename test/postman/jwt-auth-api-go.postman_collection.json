{
	"info": {
		"_postman_id": "942f1f07-2963-4500-8333-804ac7816ca2",
		"name": "Auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23231483",
		"_collection_link": "https://www.postman.com/cryosat-participant-59019525/workspace/postman-api-fundamentals-student-expert/collection/23231483-942f1f07-2963-4500-8333-804ac7816ca2?action=share&source=collection_link&creator=23231483"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"\r",
							"  // Store the data.ID in a collection variable\r",
							"  var userId = pm.response.json().data.ID;\r",
							"  pm.collectionVariables.set(\"user_id\", userId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"deon-gracias\",\r\n    \"email\": \"deon@mail.com\",\r\n    \"password\": \"deon1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_ENDPOINT}}/api/auth/user",
					"host": [
						"{{API_ENDPOINT}}"
					],
					"path": [
						"api",
						"auth",
						"user"
					]
				}
			},
			"response": [
				{
					"name": "Sample",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"deon-gracias\",\r\n    \"email\": \"deon@mail.com\",\r\n    \"password\": \"deon1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ENDPOINT}}/api/auth/user",
							"host": [
								"{{API_ENDPOINT}}"
							],
							"path": [
								"api",
								"auth",
								"user"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 04 Jan 2024 20:19:27 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "261"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						}
					],
					"cookie": [],
					"body": "{\n    \"data\": {\n        \"CreatedAt\": \"2024-01-05T01:49:27.3465254+05:30\",\n        \"UpdatedAt\": \"2024-01-05T01:49:27.3465254+05:30\",\n        \"DeletedAt\": null,\n        \"ID\": \"964e2206-298f-4d5d-b7db-5178c2dcae4c\",\n        \"username\": \"deon-gracias\",\n        \"email\": \"deon@mail.com\"\n    },\n    \"message\": \"User created\",\n    \"status\": \"success\"\n}"
				}
			]
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"\r",
							"    // Store the data.ID in a collection variable\r",
							"    var userId = pm.response.json().data.ID;\r",
							"    pm.collectionVariables.set(\"user_id\", userId);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message and status fields are empty or null\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.status).to.satisfy((status) => status === 'success', \"Status should be empty or null\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_ENDPOINT}}/api/auth/user/{{user_id}}",
					"host": [
						"{{API_ENDPOINT}}"
					],
					"path": [
						"api",
						"auth",
						"user",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"\r",
							"  var token = pm.response.json().data.token;\r",
							"  pm.collectionVariables.set(\"token\", token);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"deon@mail.com\",\r\n    \"password\": \"deon1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_ENDPOINT}}/api/auth/login",
					"host": [
						"{{API_ENDPOINT}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.include.all.keys('CreatedAt', 'UpdatedAt', 'ID', 'username', 'email', 'password');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"DeletedAt is either null or in a valid date-time format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.have.property('data');\r",
							"  pm.expect(responseData.data).to.be.an('object');\r",
							"  pm.expect(responseData.data.DeletedAt).to.satisfy((value) => value === null || !isNaN(Date.parse(value)), 'DeletedAt should be either null or a valid date-time format');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message and status fields are present and non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.message).to.exist.and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"  pm.expect(responseData.status).to.exist.and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"deon-gracias\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_ENDPOINT}}/api/auth/user/{{user_id}}",
					"host": [
						"{{API_ENDPOINT}}"
					],
					"path": [
						"api",
						"auth",
						"user",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data object is present in the response\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.data).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"passowrd\": \"deon1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_ENDPOINT}}/api/auth/user/{{user_id}}",
					"host": [
						"{{API_ENDPOINT}}"
					],
					"path": [
						"api",
						"auth",
						"user",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify Token",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_ENDPOINT}}/api/auth/verify-token",
					"host": [
						"{{API_ENDPOINT}}"
					],
					"path": [
						"api",
						"auth",
						"verify-token"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "API_ENDPOINT",
			"value": "http://localhost:5000"
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}